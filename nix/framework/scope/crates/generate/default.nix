{ lib, runCommand, writeText, linkFarm
, python3, python3Packages
, icecapSrc
, globalCrates, crateUtils, generateLockfile
}:

let

  pathBetween = here: there: import (runCommand "x.nix" {
    nativeBuildInputs = [ python3 ];
  } ''
    python3 -c 'from os.path import relpath; print("\"{}\"".format(relpath("${there}", "${here}")))' > $out
  '');

  ensureDot = s: if lib.hasPrefix "." s then s else "./${s}";

  appendToManifest = base: extra: runCommand "Cargo.toml" {
    nativeBuildInputs = [
      python3Packages.toml
    ];
  } ''
    cat ${builtins.toFile "x.toml" frontmatter} > $out
    echo >> $out
    python3 ${./append-to-manifest.py} ${builtins.toFile "x.json" (builtins.toJSON extra)} < ${base} >> $out
  '';

  frontmatter = ''
    # This file is generated by the IceCap build system.
    # It is checked-in to version control for convenience and to serve as a reference.
  '';

  realize = crate:
    let
      inherit (crate.hack) elaboratedNix rest;

      paths = lib.flip lib.mapAttrsRecursive elaboratedNix.local (_: v:
        if !lib.isList v then v else lib.listToAttrs (map (otherCrate: lib.nameValuePair otherCrate.name {
          path = ensureDot (pathBetween
            (toString elaboratedNix.passthru.path)
            (toString otherCrate.hack.elaboratedNix.passthru.path));
        }) v)
      );

      relativePath = pathBetween
        (toString (icecapSrc.relativeRaw "rust"))
        (toString elaboratedNix.passthru.path);

      base = writeText "Cargo.toml" ''
        [package]
        name = "${elaboratedNix.name}"
        version = "0.1.0"
        edition = "2018"
        ${lib.optionalString (elaboratedNix.buildScriptHack != null) ''
          build = "build.rs"
        ''}
        ${lib.optionalString (lib.hasAttr "lib" rest) ''
          [lib]
        ''}
        ${lib.optionalString (lib.hasAttr "features" rest) ''
          [features]
        ''}
      '';

      manifest = appendToManifest base (lib.recursiveUpdate rest paths);
    in {
      inherit relativePath manifest;
    };

  realized = lib.mapAttrs (lib.const realize) globalCrates._localCrates;

  # for manual inspection, useful for hacking on this script
  links = linkFarm "crates" (
    lib.flip lib.mapAttrsToList realized (_: { relativePath, manifest }: {
      name = "${relativePath}/Cargo.toml";
      path = manifest;
    })
  );

  workspaceUnchecked = writeText "workspace-unchecked.toml" ''
    ${frontmatter}
    [workspace]

    resolver = "2"

    members = [
    ${lib.concatStringsSep "\n" (lib.naturalSort (lib.flip lib.mapAttrsToList realized (_: { relativePath, ... }:
      "    \"${relativePath}\","
    )))}
    ]

    [profile.release]
    lto = true
    codegen-units = 1
  '';

  workspace = runCommand "Cargo.toml" {
    nativeBuildInputs = [
      python3Packages.toml
    ];
  } ''
    if ! python3 -c 'import sys; import toml; toml.load(sys.stdin)' < ${workspaceUnchecked}; then
      cat ${workspaceUnchecked}
      false
    fi
    ln -s ${workspaceUnchecked} $out
  '';

  lock = generateLockfile (lib.attrValues globalCrates._localCrates);

in {
  inherit realized links workspace lock;
}
